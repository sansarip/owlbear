(ns owlbear.generators.utilities
  (:require [clojure.string :as str]
            [clojure.test.check.generators :as gen]
            [owlbear.utilities :as obu]))

(def large-pos-integer (gen/fmap obu/abs gen/large-integer))

(def small-pos-integer (gen/fmap obu/abs gen/small-integer))

(def small-pos-range
  "Generates a range of small positive integers"
  (gen/let [start (gen/fmap obu/abs gen/small-integer)
            addend (gen/fmap (comp inc obu/abs) gen/small-integer)]
    (range start (+ start addend))))

(def large-pos-range
  "Generates a range of large positive integers"
  (gen/let [start (gen/fmap obu/abs gen/large-integer)
            addend (gen/fmap (comp inc obu/abs) gen/large-integer)]
    (range start (+ start addend))))

(defn subvec*
  "Generates a subset vector of a given vector"
  [vec*]
  (let [max-index (dec (count vec*))]
    (gen/let [start-index (gen/choose 0 max-index)
              addend (gen/choose 0 (- max-index start-index))]
      (subvec vec* start-index (inc (+ start-index addend))))))

(defn vector-distinct-sorted
  "Generates a sorted vector of distinct values"
  ([g]
   (vector-distinct-sorted g {}))
  ([g opts]
   (gen/fmap (comp vec sort) (gen/vector-distinct g opts))))

(defn vector-sorted
  "Generates a sorted vector"
  [g & opts]
  (gen/fmap (comp vec sort) (apply gen/vector g opts)))

(defn prefix-alpha
  "Prefixes the value generated by the given generator
   with an alpha character"
  [g]
  (gen/let [v g
            start-char gen/char-alpha]
    (str start-char v)))

(def string-alphanumeric-starts-with-alpha
  "Generate an alpha-numeric string that starts with an alpha character"
  (prefix-alpha gen/string-alphanumeric))

(defn string-from-elements
  "Generates a string from a given list of `elements`"
  [elements]
  (->> elements
       gen/elements
       gen/vector
       gen/not-empty
       (gen/fmap str/join)))

(defn string-from-generators
  "Generates a string from a given list of `elements`"
  [generators]
  (->> generators
       gen/one-of
       gen/vector
       gen/not-empty
       (gen/fmap str/join)))